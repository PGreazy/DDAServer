name: Build and Push App

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master


permissions:
  id-token: write
  contents: read


jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DJANGO_SECRET: "test_secret"
      DJANGO_ENV: "LOCAL"
      DB_USER: "admin"
      DB_PASSWORD: "admin"
      DB_NAME: "dda_db"

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          sudo apt-get install python3-poetry
          poetry --version

      - name: Install Dependencies
        run: poetry install --with dev,test

      - name: Check Style
        run: poetry run ruff check .

      - name: Check Types
        run: poetry run mypy dda/ tests/

      - name: Run Tests
        run: |
          poetry run pytest tests/ --cov=dda --cov-branch --cov-report=xml -p no:warnings

      - name: Upload Coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAG_BRANCH="${{ github.head_ref }}"
          else
            TAG_BRANCH="${{ github.ref_name }}"
          fi
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "IMAGE_TAG=${TAG_BRANCH}-${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::977098986372:role/GitHubActionsECRAccessRole
          aws-region: us-west-2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app.DOCKERFILE
          push: true
          tags: 977098986372.dkr.ecr.us-west-2.amazonaws.com/dda_backend:${{ steps.image-tag.outputs.IMAGE_TAG }}
